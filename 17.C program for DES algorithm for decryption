#include <stdio.h>
#include <stdint.h>

#define NUM_ROUNDS 16

// Permutation choice tables and shift schedule for DES key scheduling
int PC1[] = {
    57, 49, 41, 33, 25, 17, 9,
    1,  58, 50, 42, 34, 26, 18,
    10, 2,  59, 51, 43, 35, 27,
    19, 11, 3,  60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7,  62, 54, 46, 38, 30, 22,
    14, 6,  61, 53, 45, 37, 29,
    21, 13, 5,  28, 20, 12, 4
};

int PC2[] = {
    14, 17, 11, 24, 1,  5,
    3,  28, 15, 6,  21, 10,
    23, 19, 12, 4,  26, 8,
    16, 7,  27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

// Left shift schedule for each round
int SHIFTS[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

// Generate subkeys
void generateSubkeys(uint64_t key, uint64_t subkeys[NUM_ROUNDS]) {
    uint64_t permutedKey = 0;
    
    // Apply PC1 to key
    for (int i = 0; i < 56; i++) {
        permutedKey <<= 1;
        permutedKey |= (key >> (64 - PC1[i])) & 1;
    }

    uint32_t C = (permutedKey >> 28) & 0x0FFFFFFF;
    uint32_t D = permutedKey & 0x0FFFFFFF;

    for (int round = 0; round < NUM_ROUNDS; round++) {
        // Left shift C and D according to shift schedule
        C = ((C << SHIFTS[round]) | (C >> (28 - SHIFTS[round]))) & 0x0FFFFFFF;
        D = ((D << SHIFTS[round]) | (D >> (28 - SHIFTS[round]))) & 0x0FFFFFFF;

        // Combine C and D, and apply PC2 to form the subkey
        uint64_t CD = ((uint64_t)C << 28) | (uint64_t)D;
        uint64_t subkey = 0;
        for (int i = 0; i < 48; i++) {
            subkey <<= 1;
            subkey |= (CD >> (56 - PC2[i])) & 1;
        }
        subkeys[round] = subkey;
    }
}

// Feistel function (simplified for demonstration)
uint32_t feistel(uint32_t R, uint64_t subkey) {
    // Simplified function for illustration; actual DES uses S-boxes and expansion
    return (R ^ (subkey & 0xFFFFFFFF)); // Simplified XOR operation
}

// DES decryption function
uint64_t desDecrypt(uint64_t ciphertext, uint64_t subkeys[NUM_ROUNDS]) {
    uint32_t L = (ciphertext >> 32) & 0xFFFFFFFF;
    uint32_t R = ciphertext & 0xFFFFFFFF;

    for (int round = NUM_ROUNDS - 1; round >= 0; round--) {
        uint32_t previousL = L;
        L = R;
        R = previousL ^ feistel(R, subkeys[round]);
    }

    // Combine L and R
    return ((uint64_t)R << 32) | L;
}

int main() {
    uint64_t key = 0x133457799BBCDFF1;      // Example 64-bit key
    uint64_t ciphertext = 0x85E813540F0AB405; // Example 64-bit ciphertext
    uint64_t subkeys[NUM_ROUNDS];

    generateSubkeys(key, subkeys);

    uint64_t plaintext = desDecrypt(ciphertext, subkeys);
    printf("Decrypted plaintext: %016llX\n", plaintext);

    return 0;
}
