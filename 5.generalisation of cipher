#include <stdio.h>
#include <string.h>
#include <ctype.h>

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}

void encryptAffine(char* plaintext, int a, int b, char* ciphertext) {
    if (gcd(a, 26) != 1) {
        printf("Error: 'a' must be coprime with 26.\n");
        return;
    }

    int textLength = strlen(plaintext);
    for (int i = 0; i < textLength; i++) {
        if (isalpha(plaintext[i])) {
            char offset = isupper(plaintext[i]) ? 'A' : 'a';
            ciphertext[i] = ((a * (plaintext[i] - offset) + b) % 26) + offset;
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[textLength] = '\0';
}

void decryptAffine(char* ciphertext, int a, int b, char* decryptedText) {
    if (gcd(a, 26) != 1) {
        printf("Error: 'a' must be coprime with 26.\n");
        return;
    }

    int a_inv = modInverse(a, 26);
    int textLength = strlen(ciphertext);
    for (int i = 0; i < textLength; i++) {
        if (isalpha(ciphertext[i])) {
            char offset = isupper(ciphertext[i]) ? 'A' : 'a';
            decryptedText[i] = (a_inv * ((ciphertext[i] - offset - b + 26) % 26)) % 26 + offset;
        } else {
            decryptedText[i] = ciphertext[i];
        }
    }
    decryptedText[textLength] = '\0';
}

int main() {
    char plaintext[100], ciphertext[100], decryptedText[100];
    int a, b;

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';

    printf("Enter the value of 'a' (must be coprime with 26): ");
    scanf("%d", &a);
    printf("Enter the value of 'b': ");
    scanf("%d", &b);

    encryptAffine(plaintext, a, b, ciphertext);
    printf("Encrypted text: %s\n", ciphertext);

    decryptAffine(ciphertext, a, b, decryptedText);
    printf("Decrypted text: %s\n", decryptedText);

    return 0;
}
